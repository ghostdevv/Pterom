import AxiosHandler from '../utils/axiosRequest';
export default class Client {
    host: string;
    Key: string;
    axiosHandler: AxiosHandler;
    constructor(host: string, key: string);
    listServers(): Promise<any>;
    showPermissions(): Promise<any>;
    accountDetails(): Promise<any>;
    genarateTwoFactorQR(): Promise<any>;
    enableTwoFactor(code: string): Promise<any>;
    disableTwoFactor(password: string): Promise<any>;
    updateEmail(newEmail: string, password: string): Promise<any>;
    updatePassword(currentPassword: string, newPassword: string, confirmNewPassword: string): Promise<any>;
    listApiKeys(): Promise<any>;
    createApiKey(description: string, ips?: Array<string>): Promise<any>;
    deleteApiKey(identifier: string): Promise<any>;
    serverDetails(serverId: string): Promise<any>;
    resourceUsage(serverId: string): Promise<any>;
    sendCommand(serverId: string, command: string): Promise<any>;
    changePowerState(serverId: string, state: 'start' | 'stop' | 'restart' | 'kill'): Promise<any>;
    listDatabases(serverId: string): Promise<any>;
    createDatabase(serverId: string, newDatabaseName: string, remote: string): Promise<any>;
    rotateDatabasePassword(serverId: string, databaseId: string): Promise<any>;
    deleteDatabase(serverId: string, databaseId: string): Promise<any>;
    listFiles(serverId: string, dir: string): Promise<any>;
    getFileContent(serverId: string, dir: string, file: string): Promise<any>;
    downloadFile(serverId: string, dir: string, file: string): Promise<any>;
    renameFile(serverId: string, root: string, fileName: string, newFileName: string): Promise<any>;
    copyFile(serverId: string, location: string): Promise<any>;
    writeFile(serverId: string, dir: string, file: string, rawData: string): Promise<any>;
    compressFiles(serverId: string, root: string, fileName: Array<string>): Promise<any>;
    decompressFile(serverId: string, root: string, fileName: string): Promise<any>;
    deleteFile(serverId: string, root: string, fileName: Array<string>): Promise<any>;
    createFolder(serverId: string, root: string, folderName: string): Promise<any>;
    uploadFolder(serverId: string): Promise<any>;
    listSchedules(serverId: string): Promise<any>;
    createSchedules(serverId: string, name: string, minute: string, hour: string, dayOfWeek: string, dayOfMonth: string, active?: boolean): Promise<any>;
    scheduleDetails(serverId: string, scheduleId: string): Promise<any>;
    updateSchedule(serverId: string, scheduleId: string, name: string, minute: string, hour: string, dayOfWeek: string, dayOfMonth: string, active?: boolean): Promise<any>;
    deleteSchedule(serverId: string, scheduleId: string): Promise<any>;
    createTask(serverId: string, scheduleId: string, action: string, payload: string, timeOffSet: string): Promise<any>;
    private errorType;
}
